//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test_Invoice.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Test_InvoiceEntities : DbContext
    {
        public Test_InvoiceEntities()
            : base("name=Test_InvoiceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<CustomerTypes> CustomerTypes { get; set; }
        public virtual DbSet<Invoice> Invoice { get; set; }
        public virtual DbSet<InvoiceDetail> InvoiceDetail { get; set; }
    
        public virtual int sp_Insert_Customer(ObjectParameter id, string custname, string adress, Nullable<bool> status, Nullable<int> customerTypeId)
        {
            var custnameParameter = custname != null ?
                new ObjectParameter("Custname", custname) :
                new ObjectParameter("Custname", typeof(string));
    
            var adressParameter = adress != null ?
                new ObjectParameter("Adress", adress) :
                new ObjectParameter("Adress", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var customerTypeIdParameter = customerTypeId.HasValue ?
                new ObjectParameter("CustomerTypeId", customerTypeId) :
                new ObjectParameter("CustomerTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Customer", id, custnameParameter, adressParameter, statusParameter, customerTypeIdParameter);
        }
    
        public virtual int sp_Search_Customer(Nullable<int> ctdRegistros, string criterio, Nullable<bool> status, Nullable<int> customerIdType)
        {
            var ctdRegistrosParameter = ctdRegistros.HasValue ?
                new ObjectParameter("CtdRegistros", ctdRegistros) :
                new ObjectParameter("CtdRegistros", typeof(int));
    
            var criterioParameter = criterio != null ?
                new ObjectParameter("Criterio", criterio) :
                new ObjectParameter("Criterio", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var customerIdTypeParameter = customerIdType.HasValue ?
                new ObjectParameter("CustomerIdType", customerIdType) :
                new ObjectParameter("CustomerIdType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Search_Customer", ctdRegistrosParameter, criterioParameter, statusParameter, customerIdTypeParameter);
        }
    
        public virtual int sp_Update_Customer(Nullable<int> id, string custname, string adress, Nullable<bool> status, Nullable<int> customerTypeId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var custnameParameter = custname != null ?
                new ObjectParameter("Custname", custname) :
                new ObjectParameter("Custname", typeof(string));
    
            var adressParameter = adress != null ?
                new ObjectParameter("Adress", adress) :
                new ObjectParameter("Adress", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var customerTypeIdParameter = customerTypeId.HasValue ?
                new ObjectParameter("CustomerTypeId", customerTypeId) :
                new ObjectParameter("CustomerTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_Customer", idParameter, custnameParameter, adressParameter, statusParameter, customerTypeIdParameter);
        }
    }
}
